Microsoft (R) Macro Assembler Version 6.14.8444		    12/29/03 20:06:40
H:\programs\WIN32ASM\console\hostip.asm			     Page 1 - 1


				;WIN32 CONSOLE PROGRAM
				.386
				.model flat, stdcall

				option casemap:none
				.nolist
				.listall
				includelib kernel32.lib
				includelib user32.lib
				includelib crtlib.lib
				includelib masm32.lib
				includelib wsock32.lib

				main proto stdcall :dword, :dword
 00000000			.data
 00000000 48 6F 73 74 32	logo	db	"Host2IP - written by Madhur",10,13
	   49 50 20 2D 20
	   77 72 69 74 74
	   65 6E 20 62 79
	   20 4D 61 64 68
	   75 72 0A 0D
 0000001D  4E 6F 20 68 6F		db	"No hostname specified",0
	   73 74 6E 61 6D
	   65 20 73 70 65
	   63 69 66 69 65
	   64 00
 00000033  0000000A [		buff	db	10 dup(0)
	    00
	   ]
 0000003D 0000 0000		wsadata WSADATA <0>
	   00000101 [
	    00
	   ]
	   00000081 [
	    00
	   ] 0000 0000
	   00000000

 00000000			.const
 00000000 00000002		ver	dd	0002h		;higher byte=minor,lower byte=majorA
 00000004 6E 6F 74 20 73	err0	db	"not suitable winsock version",0
	   75 69 74 61 62
	   6C 65 20 77 69
	   6E 73 6F 63 6B
	   20 76 65 72 73
	   69 6F 6E 00
 00000021 57 69 6E 73 6F	app	db	"Winsock",0
	   63 6B 00
 00000029 43 6F 75 6C 64	res	db	"Could not resolve hostname",0
	   20 6E 6F 74 20
	   72 65 73 6F 6C
	   76 65 20 68 6F
	   73 74 6E 61 6D
	   65 00
 00000000			.code
				;   startup code
 00000000			start:
 00000000  83 EC 0C		    sub     esp, 12
 00000003  8D 04 24		    lea     eax, [esp+0]    ; &env
 00000006  8D 4C 24 04		    lea     ecx, [esp+4]    ; &argc
 0000000A  8D 54 24 08		    lea     edx, [esp+8]    ; &argv
				    invoke  getmainargs, ecx, edx, eax, 0	;this call will put the env,argc,argv on stack,doesnt removes argument
 0000000E  6A 00	   *	    push   +000000000h
 00000010  50		   *	    push   eax
 00000011  52		   *	    push   edx
 00000012  51		   *	    push   ecx
 00000013  E8 00000000 E   *	    call   __GetMainArgs
 00000018  83 C4 10	   *	    add    esp, 000000010h
 0000001B  83 C4 04		    add     esp, 4          ; remove env (not used)
 0000001E  E8 00000006		    call    main
				    invoke  ExitProcess, eax
 00000023  50		   *	    push   eax
 00000024  E8 00000000 E   *	    call   ExitProcess

 00000029 00000029		main proc argc:dword, argv:dword
 00000029  55		   *	    push   ebp
 0000002A  8B EC	   *	    mov    ebp, esp
					.if	argc==1
 0000002C  83 7D 08 01	   *	    cmp    argc, 001h
 00000030  75 0E	   *	    jne    @C0001
						invoke	StdOut,offset logo
 00000032  68 00000000 R   *	    push   dword  ptr OFFSET FLAT:logo
 00000037  E8 00000000 E   *	    call   StdOut
						ret
 0000003C  C9		   *	    leave  
 0000003D  C2 0008	   *	    ret    00008h
					.endif
 00000040		   *@C0001:
					
					
					invoke	WSAStartup,ver,addr wsadata
 00000040  68 0000003D R   *	    push   OFFSET wsadata
 00000045  FF 35 00000000 R *	    push   ver
 0000004B  E8 00000000 E   *	    call   WSAStartup
					.if	wsadata.wVersion<2
 00000050  66| 83 3D
	   0000003D R 02   *	    cmp    wsadata . wVersion, 002h
 00000058  73 15	   *	    jae    @C0003
						invoke	MessageBox,0,offset err0,offset app,0
 0000005A  6A 00	   *	    push   +000000000h
 0000005C  68 00000021 R   *	    push   dword  ptr OFFSET FLAT:app
 00000061  68 00000004 R   *	    push   dword  ptr OFFSET FLAT:err0
 00000066  6A 00	   *	    push   +000000000h
 00000068  E8 00000000 E   *	    call   MessageBoxA
 0000006D  EB 68				jmp	exit
					.endif
 0000006F		   *@C0003:
					
					
 0000006F  8B 4D 0C			mov	ecx,argv
 00000072  83 C1 04			add	ecx,4
 00000075  8B 01			mov	eax,[ecx]
					
					invoke	gethostbyname,eax
 00000077  50		   *	    push   eax
 00000078  E8 00000000 E   *	    call   gethostbyname
					.if	eax==0
 0000007D  0B C0	   *	    or	eax, eax
 0000007F  75 0E	   *	    jne    @C0005
						invoke	StdOut,offset res
 00000081  68 00000029 R   *	    push   dword  ptr OFFSET FLAT:res
 00000086  E8 00000000 E   *	    call   StdOut
						ret
 0000008B  C9		   *	    leave  
 0000008C  C2 0008	   *	    ret    00008h
					.endif
 0000008F		   *@C0005:
					
 0000008F  8B F8			mov	edi,eax
					assume	edi:PTR hostent
					;mov	eax,[edi].h_name
					invoke	StdOut,[edi].h_name
 00000091  FF 37	   *	    push   dword  ptr [edi]
 00000093  E8 00000000 E   *	    call   StdOut
					invoke	StdOut,[edi].h_alias
 00000098  FF 77 04	   *	    push   dword  ptr [edi]+000000004h
 0000009B  E8 00000000 E   *	    call   StdOut
					invoke	dw2hex,[edi].h_addr,offset buff
 000000A0  68 00000033 R   *	    push   dword  ptr OFFSET FLAT:buff
 000000A5  6A 00	   *	    push   000h
 000000A7  66| FF 77 08	   *	    push   word  ptr [edi]+00008h
 000000AB  E8 00000000 E   *	    call   dw2hex
					invoke	StdOut,offset buff
 000000B0  68 00000033 R   *	    push   dword  ptr OFFSET FLAT:buff
 000000B5  E8 00000000 E   *	    call   StdOut
					invoke	dw2hex,[edi].h_len,offset buff
 000000BA  68 00000033 R   *	    push   dword  ptr OFFSET FLAT:buff
 000000BF  6A 00	   *	    push   000h
 000000C1  66| FF 77 0A	   *	    push   word  ptr [edi]+0000Ah
 000000C5  E8 00000000 E   *	    call   dw2hex
					invoke	StdOut,offset buff
 000000CA  68 00000033 R   *	    push   dword  ptr OFFSET FLAT:buff
 000000CF  E8 00000000 E   *	    call   StdOut
					
 000000D4  8B 4F 0C			mov	ecx,[edi].h_list
					
					
					
						
 000000D7			exit:
					invoke	WSACleanup
 000000D7  E8 00000000 E   *	    call   WSACleanup
					ret
 000000DC  C9		   *	    leave  
 000000DD  C2 0008	   *	    ret    00008h
 000000E0			main endp

				end start
