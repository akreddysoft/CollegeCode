Microsoft (R) Macro Assembler Version 6.14.8444		    02/15/04 17:30:19
F:\programs\WIN32ASM\about\about.asm			     Page 1 - 1


				;PE EXE
				.386
				.model	flat,stdcall
				option 	casemap:none
				.nolist
				.listall
				includelib shell32.lib
				includelib gdi32.lib
				includelib masm32.lib
				includelib user32.lib
				includelib kernel32.lib

 00000000			.data?
 00000000 00000000		hinst	HINSTANCE	?

 00000000			.data
				abtproc	proto	hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
 00000000 00			flag	db	0
 00000001 00			flag1	db	0
 00000002 00000000		pt	POINT<0>
	   00000000

 0000000A 00000000		pt1	POINT<0>
	   00000000
 00000012 00000000		pt2	POINT<0>
	   00000000
 0000001A 00000000		pt3	POINT<0>
	   00000000
 00000022 00000000		hbm	HBITMAP	0
 00000026 00000000		hbm1	HBITMAP	0
 0000002A 00000000		hbm2	HBITMAP	0
 0000002E 00000000		hbm3	HBITMAP	0
 00000032 00000000		rect	RECT<0>
	   00000000
	   00000000
	   00000000
					
 00000000			.const
				dlgproc	proto  	hwnd:HWND,umsg:DWORD,wparam:WPARAM,lparam:LPARAM
 00000000 49 44 44 5F 4D	dialog		db	'IDD_MAIN',0
	   41 49 4E 00
 00000009 49 44 44 5F 41	abtdlg		db	"IDD_ABOUT",0
	   42 4F 55 54 00
 = 00000001			IDOK		EQU	1
 = 00000065			IDC_ABOUT	equ	101
 = 00000009			IDEXIT		equ	9
 00000013 6F 70 65 6E 00	action		db	"open",0
 00000018 77 77 77 2E 67	ad1		db	"www.geocities.com/madhur_ahuja",0
	   65 6F 63 69 74
	   69 65 73 2E 63
	   6F 6D 2F 6D 61
	   64 68 75 72 5F
	   61 68 75 6A 61
	   00
 00000037 6D 61 69 6C 74	ad2		db	"mailto:madhur_ahuja@yahoo.com",0
	   6F 3A 6D 61 64
	   68 75 72 5F 61
	   68 75 6A 61 40
	   79 61 68 6F 6F
	   2E 63 6F 6D 00
 00000000			.code
 00000000			start:
 00000000				invoke	GetModuleHandle,NULL
 00000000  6A 00	   *	    push   +000000000h
 00000002  E8 00000000 E   *	    call   GetModuleHandleA
 00000007  A3 00000000 R		mov	[hinst],eax
					invoke	DialogBoxParam,hinst,addr dialog,0,addr dlgproc,0
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  68 0000002C R   *	    push   dlgproc
 00000013  6A 00	   *	    push   +000000000h
 00000015  68 00000000 R   *	    push   OFFSET dialog
 0000001A  FF 35 00000000 R *	    push   hinst
 00000020  E8 00000000 E   *	    call   DialogBoxParamA
					invoke	ExitProcess,0
 00000025  6A 00	   *	    push   +000000000h
 00000027  E8 00000000 E   *	    call   ExitProcess


 0000002C 0000002C		dlgproc	proc	hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
 0000002C  55		   *	    push   ebp
 0000002D  8B EC	   *	    mov    ebp, esp
					.if	uMsg==WM_INITDIALOG
 0000002F  81 7D 0C
	   00000110	   *	    cmp    uMsg, WM_INITDIALOG
 00000036  75 02	   *	    jne    @C0001

					.elseif	uMsg==WM_COMMAND
 00000038  EB 3F	   *	    jmp    @C0003
 0000003A		   *@C0001:
 0000003A  81 7D 0C
	   00000111	   *	    cmp    uMsg, WM_COMMAND
 00000041  75 1B	   *	    jne    @C0004
 00000043  8B 45 10				mov	eax,wparam
						.if	ax==IDOK
 00000046  66| 83 F8 01	   *	    cmp    ax, IDOK
 0000004A  75 10	   *	    jne    @C0006
							invoke	SendMessage,hwnd,WM_CLOSE,0,0
 0000004C  6A 00	   *	    push   +000000000h
 0000004E  6A 00	   *	    push   +000000000h
 00000050  6A 10	   *	    push   +000000010h
 00000052  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000055  E8 00000000 E   *	    call   SendMessageA
						.else
 0000005A  EB 1D	   *	    jmp    @C0008
 0000005C		   *@C0006:
						.endif              
					.elseif	uMsg==WM_CLOSE
 0000005C  EB 1B	   *	    jmp    @C0009
 0000005E		   *@C0004:
 0000005E  83 7D 0C 10	   *	    cmp    uMsg, WM_CLOSE
 00000062  75 0C	   *	    jne    @C000A
						invoke	EndDialog,hwnd,0
 00000064  6A 00	   *	    push   +000000000h
 00000066  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000069  E8 00000000 E   *	    call   EndDialog
					.else
 0000006E  EB 09	   *	    jmp    @C000C
 00000070		   *@C000A:
 00000070  B8 00000000				mov	eax,FALSE
						ret
 00000075  C9		   *	    leave  
 00000076  C2 0010	   *	    ret    00010h
					.endif
 00000079		   *@C000C:
 00000079		   *@C0009:
 00000079		   *@C0003:
 00000079		   *@C0008:
 00000079  B8 00000001			mov	eax,TRUE
					ret												                   		              
 0000007E  C9		   *	    leave  
 0000007F  C2 0010	   *	    ret    00010h
 00000082			dlgproc	endp


 00000082			abtproc proc  hwnd:HWND,msg:UINT,wparam:WPARAM,lparam:LPARAM
				local ps:PAINTSTRUCT
				local hdc,mhdc,mhdc1


 00000082  55		   *	    push   ebp
 00000083  8B EC	   *	    mov    ebp, esp
 00000085  83 C4 B4	   *	    add    esp, 0FFFFFFB4h
					.if	msg== WM_INITDIALOG
 00000088  81 7D 0C
	   00000110	   *	    cmp    msg, WM_INITDIALOG
 0000008F  0F 85 000000C4  *	    jne    @C000D
						invoke	LoadBitmap,hinst,IDCHOUSE
 00000095  68 000003EA	   *	    push   +0000003EAh
 0000009A  FF 35 00000000 R *	    push   hinst
 000000A0  E8 00000000 E   *	    call   LoadBitmapA
 000000A5  A3 00000022 R			mov	hbm,eax
						invoke	LoadBitmap,hinst,IDHOUSE
 000000AA  6A 6A	   *	    push   +00000006Ah
 000000AC  FF 35 00000000 R *	    push   hinst
 000000B2  E8 00000000 E   *	    call   LoadBitmapA
 000000B7  A3 00000026 R			mov	hbm1,eax
						invoke	LoadBitmap,hinst,IDCMAIL
 000000BC  68 000003E8	   *	    push   +0000003E8h
 000000C1  FF 35 00000000 R *	    push   hinst
 000000C7  E8 00000000 E   *	    call   LoadBitmapA
 000000CC  A3 0000002A R			mov	hbm2,eax
						invoke	LoadBitmap,hinst,IDMAIL
 000000D1  6A 68	   *	    push   +000000068h
 000000D3  FF 35 00000000 R *	    push   hinst
 000000D9  E8 00000000 E   *	    call   LoadBitmapA
 000000DE  A3 0000002E R			mov	hbm3,eax
						
 000000E3  C7 05 0000000A R			mov	pt1.x,0fh
	   0000000F
 000000ED  C7 05 0000000E R			mov	pt1.y,60h
	   00000060
						
 000000F7  8B 0D 0000000A R			mov	ecx,pt1.x
 000000FD  8B 15 0000000E R			mov	edx,pt1.y
						
 00000103  89 0D 00000012 R			mov	pt2.x,ecx
 00000109  89 15 00000016 R			mov	pt2.y,edx
 0000010F  83 05 00000012 R			add	pt2.x,25
	   19
 00000116  83 05 00000016 R			add	pt2.y,3
	   03

						m2m	rect.top,pt1.y
 0000011D  FF 35 0000000E R  1		push	pt1.y
 00000123  8F 05 00000036 R  1		pop	rect.top
						m2m	rect.bottom,pt1.y
 00000129  FF 35 0000000E R  1		push	pt1.y
 0000012F  8F 05 0000003E R  1		pop	rect.bottom
 00000135  83 05 0000003E R			add	rect.bottom,14
	   0E
						m2m	rect.left,pt1.x
 0000013C  FF 35 0000000A R  1		push	pt1.x
 00000142  8F 05 00000032 R  1		pop	rect.left
						m2m	rect.right,pt2.x
 00000148  FF 35 00000012 R  1		push	pt2.x
 0000014E  8F 05 0000003A R  1		pop	rect.right

					.elseif	msg== WM_CLOSE
 00000154  E9 0000031D	   *	    jmp    @C000F
 00000159		   *@C000D:
 00000159  83 7D 0C 10	   *	    cmp    msg, WM_CLOSE
 0000015D  75 3B	   *	    jne    @C0010
						invoke	DeleteObject,hbm
 0000015F  FF 35 00000022 R *	    push   hbm
 00000165  E8 00000000 E   *	    call   DeleteObject
						invoke	DeleteObject,hbm1
 0000016A  FF 35 00000026 R *	    push   hbm1
 00000170  E8 00000000 E   *	    call   DeleteObject
						invoke	DeleteObject,hbm2
 00000175  FF 35 0000002A R *	    push   hbm2
 0000017B  E8 00000000 E   *	    call   DeleteObject
						invoke	DeleteObject,hbm3
 00000180  FF 35 0000002E R *	    push   hbm3
 00000186  E8 00000000 E   *	    call   DeleteObject
						invoke	EndDialog,hwnd,0
 0000018B  6A 00	   *	    push   +000000000h
 0000018D  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000190  E8 00000000 E   *	    call   EndDialog

					.elseif	msg==WM_COMMAND
 00000195  E9 000002DC	   *	    jmp    @C0012
 0000019A		   *@C0010:
 0000019A  81 7D 0C
	   00000111	   *	    cmp    msg, WM_COMMAND
 000001A1  75 20	   *	    jne    @C0013
 000001A3  8B 45 10				mov	eax,wparam
						.if	ax==IDOK
 000001A6  66| 83 F8 01	   *	    cmp    ax, IDOK
 000001AA  0F 85 000002C6  *	    jne    @C0015
							invoke	SendMessage,hwnd,WM_CLOSE,0,0
 000001B0  6A 00	   *	    push   +000000000h
 000001B2  6A 00	   *	    push   +000000000h
 000001B4  6A 10	   *	    push   +000000010h
 000001B6  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000001B9  E8 00000000 E   *	    call   SendMessageA
						.endif

					.elseif	msg==WM_MOUSEMOVE
 000001BE  E9 000002B3	   *	    jmp    @C0017
 000001C3		   *@C0013:
 000001C3  81 7D 0C
	   00000200	   *	    cmp    msg, WM_MOUSEMOVE
 000001CA  0F 85 0000011C  *	    jne    @C0018
 000001D0  8B 45 14				mov	eax,lparam
						m2m	pt.x,ax
 000001D3  66| 50	     1		push	ax
 000001D5  8F 05 00000002 R  1		pop	pt.x
 000001DB  C1 E8 10				shr	eax,16
						m2m	pt.y,ax
 000001DE  66| 50	     1		push	ax
 000001E0  8F 05 00000006 R  1		pop	pt.y
					
						.if pt.x >=pt1.x && pt.x <pt1.x+14 && pt.y >=pt1.y && pt.y<pt1.y +14
F:\programs\WIN32ASM\about\about.asm(128) : error A2070: invalid instruction operands
			   *	    cmp    pt . x, pt1 . x
 000001E6  72 5F	   *	    jb     @C001A
			   *	    cmp    pt . x, pt1 . x + 00Eh
 000001E8  73 5D	   *	    jae    @C001A
			   *	    cmp    pt . y, pt1 . y
 000001EA  72 5B	   *	    jb     @C001A
			   *	    cmp    pt . y, pt1 . y + 00Eh
 000001EC  73 59	   *	    jae    @C001A
							.if flag==0
 000001EE  80 3D 00000000 R
	   00		   *	    cmp    flag, 000h
 000001F5  75 6F	   *	    jne    @C001F
 000001F7  C6 05 00000000 R					mov	flag,1
	   01
								invoke	InvalidateRect,hwnd,addr rect,1
 000001FE  6A 01	   *	    push   +000000001h
 00000200  68 00000032 R   *	    push   OFFSET rect
 00000205  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000208  E8 00000000 E   *	    call   InvalidateRect
							.endif
						.else
 0000020D  EB 57	   *	    jmp    @C0021
 00000247		   *@C001A:
						
							.if flag==1
 00000247  80 3D 00000000 R
	   01		   *	    cmp    flag, 001h
 0000024E  75 16	   *	    jne    @C0022
 00000250  C6 05 00000000 R					mov	flag,0
	   00
								invoke	InvalidateRect,hwnd,addr rect,1
 00000257  6A 01	   *	    push   +000000001h
 00000259  68 00000032 R   *	    push   OFFSET rect
 0000025E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000261  E8 00000000 E   *	    call   InvalidateRect
							.endif
						.endif
 00000266		   *@C0022:
						

						.if pt.x >=pt2.x && pt.x <pt2.x+14 && pt.y >=pt2.y && pt.y<pt2.y +14
F:\programs\WIN32ASM\about\about.asm(142) : error A2070: invalid instruction operands
 00000266		   *@C0021:
 00000266		   *@C001F:
			   *	    cmp    pt . x, pt2 . x
 00000266  72 63	   *	    jb     @C0024
			   *	    cmp    pt . x, pt2 . x + 00Eh
 00000268  73 61	   *	    jae    @C0024
			   *	    cmp    pt . y, pt2 . y
 0000026A  72 5F	   *	    jb     @C0024
			   *	    cmp    pt . y, pt2 . y + 00Eh
 0000026C  73 5D	   *	    jae    @C0024
							.if flag1==0
 0000026E  80 3D 00000001 R
	   00		   *	    cmp    flag1, 000h
 00000275  0F 85 000001FB  *	    jne    @C0029
 0000027B  C6 05 00000001 R					mov	flag1,1
	   01
								invoke	InvalidateRect,hwnd,0,1
 00000282  6A 01	   *	    push   +000000001h
 00000284  6A 00	   *	    push   +000000000h
 00000286  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000289  E8 00000000 E   *	    call   InvalidateRect
							.endif
						.else
 0000028E  E9 000001E3	   *	    jmp    @C002B
 000002CB		   *@C0024:

							.if flag1==1
 000002CB  80 3D 00000001 R
	   01		   *	    cmp    flag1, 001h
 000002D2  75 13	   *	    jne    @C002C
 000002D4  C6 05 00000001 R					mov	flag1,0
	   00
								invoke	InvalidateRect,hwnd,0,1
 000002DB  6A 01	   *	    push   +000000001h
 000002DD  6A 00	   *	    push   +000000000h
 000002DF  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002E2  E8 00000000 E   *	    call   InvalidateRect
							.endif
						.endif
 000002E7		   *@C002C:

					.elseif	msg==WM_PAINT
 000002E7  E9 0000018A	   *	    jmp    @C002E
 000002EC		   *@C0018:
 000002EC  83 7D 0C 0F	   *	    cmp    msg, WM_PAINT
 000002F0  0F 85 0000009C  *	    jne    @C002F
						invoke	BeginPaint,hwnd,addr ps
 000002F6  8D 45 C0	   *	    lea    eax, PAINTSTRUCT ptr ss:[ebp]+0FFFFFFC0h
 000002F9  50		   *	    push   eax
 000002FA  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002FD  E8 00000000 E   *	    call   BeginPaint
 00000302  89 45 BC				mov	hdc,eax
						invoke	CreateCompatibleDC,hdc
 00000305  FF 75 BC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFBCh
 00000308  E8 00000000 E   *	    call   CreateCompatibleDC
 0000030D  89 45 B8				mov	mhdc,eax
						invoke	CreateCompatibleDC,hdc
 00000310  FF 75 BC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFBCh
 00000313  E8 00000000 E   *	    call   CreateCompatibleDC
 00000318  89 45 B4				mov	mhdc1,eax
						
						.if flag==1
 0000031B  80 3D 00000000 R
	   01		   *	    cmp    flag, 001h
 00000322  75 10	   *	    jne    @C0031
							invoke	SelectObject,mhdc,hbm
 00000324  FF 35 00000022 R *	    push   hbm
 0000032A  FF 75 B8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB8h
 0000032D  E8 00000000 E   *	    call   SelectObject
						.else
 00000332  EB 0E	   *	    jmp    @C0033
 00000334		   *@C0031:
							invoke	SelectObject,mhdc,hbm1
 00000334  FF 35 00000026 R *	    push   hbm1
 0000033A  FF 75 B8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB8h
 0000033D  E8 00000000 E   *	    call   SelectObject
						.endif
						
						.if flag1==1
 00000342		   *@C0033:
 00000342  80 3D 00000001 R
	   01		   *	    cmp    flag1, 001h
 00000349  75 10	   *	    jne    @C0034
							invoke	SelectObject,mhdc1,hbm2
 0000034B  FF 35 0000002A R *	    push   hbm2
 00000351  FF 75 B4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB4h
 00000354  E8 00000000 E   *	    call   SelectObject
						.else
 00000359  EB 0E	   *	    jmp    @C0036
 0000035B		   *@C0034:
							invoke	SelectObject,mhdc1,hbm3
 0000035B  FF 35 0000002E R *	    push   hbm3
 00000361  FF 75 B4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB4h
 00000364  E8 00000000 E   *	    call   SelectObject
						.endif

						invoke	TransparentBlt,hdc,pt1.x,pt1.y ,14,14,mhdc,0,0,14,14,0ff00ffh
F:\programs\WIN32ASM\about\about.asm(175) : error A2006: undefined symbol : TransparentBlt
						invoke	TransparentBlt,hdc,pt2.x ,pt2.y ,11,11,mhdc1,0,0,11,11,0ff00ffh
F:\programs\WIN32ASM\about\about.asm(176) : error A2006: undefined symbol : TransparentBlt

						invoke	DeleteDC,hdc
 00000369		   *@C0036:
 00000369  FF 75 BC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFBCh
 0000036C  E8 00000000 E   *	    call   DeleteDC
						invoke	DeleteDC,mhdc
 00000371  FF 75 B8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB8h
 00000374  E8 00000000 E   *	    call   DeleteDC
						invoke	DeleteDC,mhdc1
 00000379  FF 75 B4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFB4h
 0000037C  E8 00000000 E   *	    call   DeleteDC
						invoke	EndPaint,hwnd,addr ps
 00000381  8D 45 C0	   *	    lea    eax, PAINTSTRUCT ptr ss:[ebp]+0FFFFFFC0h
 00000384  50		   *	    push   eax
 00000385  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000388  E8 00000000 E   *	    call   EndPaint

					.elseif	msg==WM_LBUTTONDOWN
 0000038D  E9 000000E4	   *	    jmp    @C0037
 00000392		   *@C002F:
 00000392  81 7D 0C
	   00000201	   *	    cmp    msg, WM_LBUTTONDOWN
 00000399  0F 85 000000CE  *	    jne    @C0038
 0000039F  8B 45 10				mov	eax,wparam
						mov	pt.x,ax
F:\programs\WIN32ASM\about\about.asm(185) : error A2022: instruction operands must be the same size
 000003A2  C1 E0 10				shl	eax,16
						mov	pt.y,ax
F:\programs\WIN32ASM\about\about.asm(187) : error A2022: instruction operands must be the same size
						.if pt.x >=pt1.x && pt.x <pt1.x+14 && pt.y >=pt1.y && pt.y<pt1.y +14
F:\programs\WIN32ASM\about\about.asm(188) : error A2070: invalid instruction operands
			   *	    cmp    pt . x, pt1 . x
 000003A5  72 6C	   *	    jb     @C003A
			   *	    cmp    pt . x, pt1 . x + 00Eh
 000003A7  73 6A	   *	    jae    @C003A
			   *	    cmp    pt . y, pt1 . y
 000003A9  72 68	   *	    jb     @C003A
			   *	    cmp    pt . y, pt1 . y + 00Eh
 000003AB  73 66	   *	    jae    @C003A
							invoke	ShellExecute,hwnd,offset action,offset ad1,0,0,0
 000003AD  6A 00	   *	    push   +000000000h
 000003AF  6A 00	   *	    push   +000000000h
 000003B1  6A 00	   *	    push   +000000000h
 000003B3  68 00000018 R   *	    push   dword  ptr OFFSET FLAT:ad1
 000003B8  68 00000013 R   *	    push   dword  ptr OFFSET FLAT:action
 000003BD  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000003C0  E8 00000000 E   *	    call   ShellExecuteA
						.endif
						.if pt.x >=pt2.x && pt.x <pt2.x+14 && pt.y >=pt2.y && pt.y<pt2.y +14
F:\programs\WIN32ASM\about\about.asm(191) : error A2070: invalid instruction operands
 00000413		   *@C003A:
			   *	    cmp    pt . x, pt2 . x
 00000413  72 61	   *	    jb     @C003F
			   *	    cmp    pt . x, pt2 . x + 00Eh
 00000415  73 5F	   *	    jae    @C003F
			   *	    cmp    pt . y, pt2 . y
 00000417  72 5D	   *	    jb     @C003F
			   *	    cmp    pt . y, pt2 . y + 00Eh
 00000419  73 5B	   *	    jae    @C003F
							invoke	ShellExecute,hwnd,offset action,offset ad2,0,0,0
 0000041B  6A 00	   *	    push   +000000000h
 0000041D  6A 00	   *	    push   +000000000h
 0000041F  6A 00	   *	    push   +000000000h
 00000421  68 00000037 R   *	    push   dword  ptr OFFSET FLAT:ad2
 00000426  68 00000013 R   *	    push   dword  ptr OFFSET FLAT:action
 0000042B  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000042E  E8 00000000 E   *	    call   ShellExecuteA
						.endif
					
					
					.else
 00000433  EB 41	   *	    jmp    @C0044
 0000046D		   *@C0038:
 0000046D  B8 00000000				mov	eax,0
						ret
 00000472  C9		   *	    leave  
 00000473  C2 0010	   *	    ret    00010h
					.endif
 00000476		   *@C0044:
 00000476		   *@C0037:
 00000476		   *@C002E:
 00000476		   *@C0017:
 00000476		   *@C0012:
 00000476		   *@C000F:
 00000476		   *@C0015:
 00000476		   *@C002B:
 00000476		   *@C0029:
 00000476		   *@C003F:
 00000476  B8 00000001			mov	eax,1
					ret
 0000047B  C9		   *	    leave  
 0000047C  C2 0010	   *	    ret    00010h
 0000047F			abtproc	endp
				end	start	
