Microsoft (R) Macro Assembler Version 6.14.8444		    06/30/11 18:26:25
trans.asm						     Page 1 - 1


				;###################################################
				;	Description:	Transparent Icon
				;	Version:  	1.0             
				; 	Author:		Madhur           
				;	Start Date: 	17/12/03,09:02:03                     
				;	Name:  		trans.asm 
				;	Assembler:  	MASM 6.14.8444
				;	Linker:  	Link.exe 5.12.8078
				;###################################################
				;user specifies color in form of 00rrggbb
				.386
				.model	flat,stdcall
				option 	casemap:none
				.nolist
				.listall
				includelib gdi32.lib
				includelib user32.lib
				includelib kernel32.lib
				includelib masm32.lib
				tproc	proto hwnd11:HWND,D:UINT,S:UINT,H:DWORD
 00000000			.data?
 00000000 00000000		rgb	dd	?
 00000004 00000000		event	dd	?
 00000008 00000000		listhwnd	dd	?
				;hwnd		dd	?
				;hwnd1		dd	?
 0000000C 00000000		color		dd	?
 00000010 00000000		msg	MSG	<?>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 0000002C 00000000		pnt		dd	?
 00000030  00000009 [		buff		db	9 dup(?)
	    00
	   ]
 00000000			.const
 00000000 50 72 6F 67 72	running		db	"Program Already Running",10,13
	   61 6D 20 41 6C
	   72 65 61 64 79
	   20 52 75 6E 6E
	   69 6E 67 0A 0D
 00000019  43 6C 6F 73 65			db	"Close Already Running",0
	   20 41 6C 72 65
	   61 64 79 20 52
	   75 6E 6E 69 6E
	   67 00
 0000002F 65 76 65 6E 74	eventn		db	"event1",0
	   31 00
 00000036 54 72 61 6E 73	logo		db	"TransIcon",0
	   49 63 6F 6E 00
 00000040 50 72 6F 67 6D	progclass	db	"Progman",0
	   61 6E 00
 00000048 50 72 6F 67 72	progcap		db	"Program Manager",0
	   61 6D 20 4D 61
	   6E 61 67 65 72
	   00
 00000058 53 48 45 4C 4C	shellclass	db	"SHELLDLL_DefView",0
	   44 4C 4C 5F 44
	   65 66 56 69 65
	   77 00
 00000069 53 79 73 4C 69	listclass	db	"SysListView32",0
	   73 74 56 69 65
	   77 33 32 00
 00000000			.code
 00000000			start:

					invoke	CreateEvent,0,0,0,offset eventn		;if event already exists it will be opened
 00000000  68 0000002F R   *	    push   dword  ptr OFFSET FLAT:eventn
 00000005  6A 00	   *	    push   +000000000h
 00000007  6A 00	   *	    push   +000000000h
 00000009  6A 00	   *	    push   +000000000h
 0000000B  E8 00000000 E   *	    call   CreateEventA
 00000010  A3 00000004 R		mov	event,eax		
					invoke	GetLastError				
 00000015  E8 00000000 E   *	    call   GetLastError
					.if	eax==0b7h					
 0000001A  3D 000000B7	   *	    cmp    eax, 0B7h
 0000001F  75 2A	   *	    jne    @C0001
						invoke	MessageBox,0,offset running,offset logo,MB_ICONQUESTION or MB_YESNO
 00000021  6A 24	   *	    push   +000000024h
 00000023  68 00000036 R   *	    push   dword  ptr OFFSET FLAT:logo
 00000028  68 00000000 R   *	    push   dword  ptr OFFSET FLAT:running
 0000002D  6A 00	   *	    push   +000000000h
 0000002F  E8 00000000 E   *	    call   MessageBoxA
						.if	eax==IDYES
 00000034  83 F8 06	   *	    cmp    eax, IDYES
 00000037  75 0B	   *	    jne    @C0003
							invoke	SetEvent,event		;send the signal to other process to terminate itself
 00000039  FF 35 00000004 R *	    push   event
 0000003F  E8 00000000 E   *	    call   SetEvent
						.endif
						invoke	ExitProcess,0
 00000044		   *@C0003:
 00000044  6A 00	   *	    push   +000000000h
 00000046  E8 00000000 E   *	    call   ExitProcess
					
					.endif
 0000004B		   *@C0001:
					
					invoke  GetCL, 1, offset buff
 0000004B  68 00000030 R   *	    push   dword  ptr OFFSET FLAT:buff
 00000050  6A 01	   *	    push   +000000001h
 00000052  E8 00000000 E   *	    call   GetCL
 00000057  B8 00000030 R		mov	eax,offset buff
					invoke	htodw,eax
 0000005C  50		   *	    push   eax
 0000005D  E8 00000000 E   *	    call   htodw
 00000062  8B C8			mov	ecx,eax
 00000064  8B D1			mov	edx,ecx
 00000066  C1 EA 10			shr	edx,16
					RGB	dl,ch,cl
 00000069  33 C0	     1	        xor eax, eax
 0000006B  8A C1	     1	        mov al, cl    ; blue
 0000006D  C1 C0 08	     1	        rol eax, 8
 00000070  8A C5	     1	        mov al, ch   ; green
 00000072  C1 C0 08	     1	        rol eax, 8
 00000075  8A C2	     1	        mov al, dl     ; red
 00000077  A3 0000000C R		mov	color,eax
					
					invoke	FindWindow,offset progclass,offset progcap
 0000007C  68 00000048 R   *	    push   dword  ptr OFFSET FLAT:progcap
 00000081  68 00000040 R   *	    push   dword  ptr OFFSET FLAT:progclass
 00000086  E8 00000000 E   *	    call   FindWindowA
					;mov	hwnd,eax
					invoke	FindWindowEx,eax,0,offset shellclass,0
 0000008B  6A 00	   *	    push   +000000000h
 0000008D  68 00000058 R   *	    push   dword  ptr OFFSET FLAT:shellclass
 00000092  6A 00	   *	    push   +000000000h
 00000094  50		   *	    push   eax
 00000095  E8 00000000 E   *	    call   FindWindowExA
					;mov	hwnd1,eax
					invoke	FindWindowEx,eax,0,offset listclass,0
 0000009A  6A 00	   *	    push   +000000000h
 0000009C  68 00000069 R   *	    push   dword  ptr OFFSET FLAT:listclass
 000000A1  6A 00	   *	    push   +000000000h
 000000A3  50		   *	    push   eax
 000000A4  E8 00000000 E   *	    call   FindWindowExA
 000000A9  A3 00000008 R		mov	listhwnd,eax
					
					invoke	SetTimer,0,0,1000,offset tproc
 000000AE  68 00000104 R   *	    push   dword  ptr OFFSET FLAT:tproc
 000000B3  68 000003E8	   *	    push   +0000003E8h
 000000B8  6A 00	   *	    push   +000000000h
 000000BA  6A 00	   *	    push   +000000000h
 000000BC  E8 00000000 E   *	    call   SetTimer
					
					.while	1
 000000C1		   *@C0005:
						invoke	GetMessage,offset msg,0,0,0
 000000C1  6A 00	   *	    push   +000000000h
 000000C3  6A 00	   *	    push   +000000000h
 000000C5  6A 00	   *	    push   +000000000h
 000000C7  68 00000010 R   *	    push   dword  ptr OFFSET FLAT:msg
 000000CC  E8 00000000 E   *	    call   GetMessageA
						invoke	DispatchMessage,offset msg
 000000D1  68 00000010 R   *	    push   dword  ptr OFFSET FLAT:msg
 000000D6  E8 00000000 E   *	    call   DispatchMessageA
						invoke	WaitForSingleObject,event,0
 000000DB  6A 00	   *	    push   +000000000h
 000000DD  FF 35 00000004 R *	    push   event
 000000E3  E8 00000000 E   *	    call   WaitForSingleObject
						.if	eax==WAIT_OBJECT_0		;the other process has signalled, exit now
 000000E8  0B C0	   *	    or	eax, eax
 000000EA  75 16	   *	    jne    @C0006
								invoke	InvalidateRect,listhwnd,0,1
 000000EC  6A 01	   *	    push   +000000001h
 000000EE  6A 00	   *	    push   +000000000h
 000000F0  FF 35 00000008 R *	    push   listhwnd
 000000F6  E8 00000000 E   *	    call   InvalidateRect
								invoke	ExitProcess,0
 000000FB  6A 00	   *	    push   +000000000h
 000000FD  E8 00000000 E   *	    call   ExitProcess
						.endif
					.endw
 00000102		   *@C0006:
 00000102  EB BD	   *	    jmp    @C0005
					
 00000104			tproc	proc hwnd11:HWND,D:UINT,S:UINT,H:DWORD
 00000104  55		   *	    push   ebp
 00000105  8B EC	   *	    mov    ebp, esp
					invoke	SendMessage,listhwnd,LVM_GETTEXTCOLOR ,0,0
 00000107  6A 00	   *	    push   +000000000h
 00000109  6A 00	   *	    push   +000000000h
 0000010B  68 00001023	   *	    push   +000001023h
 00000110  FF 35 00000008 R *	    push   listhwnd
 00000116  E8 00000000 E   *	    call   SendMessageA
					.if	eax!=color
 0000011B  3B 05 0000000C R *	    cmp    eax, color
 00000121  74 27	   *	    je     @C0009
						invoke	SendMessage,listhwnd,LVM_SETTEXTCOLOR ,0,color
 00000123  FF 35 0000000C R *	    push   color
 00000129  6A 00	   *	    push   +000000000h
 0000012B  68 00001024	   *	    push   +000001024h
 00000130  FF 35 00000008 R *	    push   listhwnd
 00000136  E8 00000000 E   *	    call   SendMessageA
						invoke	InvalidateRect,listhwnd,0,1
 0000013B  6A 01	   *	    push   +000000001h
 0000013D  6A 00	   *	    push   +000000000h
 0000013F  FF 35 00000008 R *	    push   listhwnd
 00000145  E8 00000000 E   *	    call   InvalidateRect
					.endif
 0000014A		   *@C0009:
					invoke	SendMessage,listhwnd,LVM_GETTEXTBKCOLOR ,0,0
 0000014A  6A 00	   *	    push   +000000000h
 0000014C  6A 00	   *	    push   +000000000h
 0000014E  68 00001025	   *	    push   +000001025h
 00000153  FF 35 00000008 R *	    push   listhwnd
 00000159  E8 00000000 E   *	    call   SendMessageA
					.if	eax!=0ffffffffh
 0000015E  83 F8 FF	   *	    cmp    eax, 0FFFFFFFFh
 00000161  74 23	   *	    je     @C000B
						invoke	SendMessage,listhwnd,LVM_SETTEXTBKCOLOR ,0,0ffffffffh
 00000163  6A FF	   *	    push   +0FFFFFFFFh
 00000165  6A 00	   *	    push   +000000000h
 00000167  68 00001026	   *	    push   +000001026h
 0000016C  FF 35 00000008 R *	    push   listhwnd
 00000172  E8 00000000 E   *	    call   SendMessageA
						invoke	InvalidateRect,listhwnd,0,1
 00000177  6A 01	   *	    push   +000000001h
 00000179  6A 00	   *	    push   +000000000h
 0000017B  FF 35 00000008 R *	    push   listhwnd
 00000181  E8 00000000 E   *	    call   InvalidateRect
					.endif
 00000186		   *@C000B:
					ret
 00000186  C9		   *	    leave  
 00000187  C2 0010	   *	    ret    00010h
 0000018A			tproc	endp
				end	start	
