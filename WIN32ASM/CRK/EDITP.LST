Microsoft (R) Macro Assembler Version 6.14.8444		    10/07/03 16:01:55
E:\PROGRA~1\WIN32ASM\crk\editp.asm			     Page 1 - 1


				.386                             
				.model	flat,stdcall             
				option 	casemap:none             
				.nolist
				.listall
				includelib advapi32.lib
				includelib e:\masm32\lib\user32.lib            
				includelib e:\masm32\lib\kernel32.lib          
				;##########################################################
 00000000			.data?                           ;dfdsfsdffd
 00000000 00000000		hinst	HINSTANCE	?
 00000004 00			buff	db		?
 00000005 00000000		oh	dd	?
 00000009 00000000		fh	dd	?
 0000000D 00000000		sh	dd	?
 00000011 00000000		th	dd	?
				;##########################################################
 00000000			.const
 00000000 45 64 69 74 50	title1	db	'EditPlus 2.10C Crack',13,10
	   6C 75 73 20 32
	   2E 31 30 43 20
	   43 72 61 63 6B
	   0D 0A
 00000016  3D 3D 3D 3D 3D		db	'=====================',13,10,13,10
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 0D 0A 0D 0A
 0000002F  50 72 6F 74 65		db	'Protection: Time Limit',13,10
	   63 74 69 6F 6E
	   3A 20 54 69 6D
	   65 20 4C 69 6D
	   69 74 0D 0A
 00000047  46 69 6C 65 20		db	'File to Patch: editplus.exe',13,10
	   74 6F 20 50 61
	   74 63 68 3A 20
	   65 64 69 74 70
	   6C 75 73 2E 65
	   78 65 0D 0A
 00000064  46 69 6C 65 73		db	'Filesize: 1207808 Bytes',13,10,13,10
	   69 7A 65 3A 20
	   31 32 30 37 38
	   30 38 20 42 79
	   74 65 73 0D 0A
	   0D 0A
 0000007F  52 75 6E 20 74		db	'Run this patch in the same directory where the .exe file is located.',0
	   68 69 73 20 70
	   61 74 63 68 20
	   69 6E 20 74 68
	   65 20 73 61 6D
	   65 20 64 69 72
	   65 63 74 6F 72
	   79 20 77 68 65
	   72 65 20 74 68
	   65 20 2E 65 78
	   65 20 66 69 6C
	   65 20 69 73 20
	   6C 6F 63 61 74
	   65 64 2E 00
 000000C4 44 49 41 4C 4F	dialog	db	'DIALOG_3',0
	   47 5F 33 00
 000000CD 44 49 41 4C 4F	abtdlg	db	'DIALOG_2',0
	   47 5F 32 00
 000000D6 23 33 32 37 37	dlgclass db	'#32770',0
	   30 00
 000000DD 49 43 4F 4E 31	icn	db	'ICON1',0
	   00
 000000E3 65 64 69 74 70	file	db	'editplus.exe',0
	   6C 75 73 2E 65
	   78 65 00
 000000F0 65 64 69 74 70	bfile	db	'editplus.bak',0
	   6C 75 73 2E 62
	   61 6B 00
 000000FD 43 61 6E 6E 6F	err1	db	"Cannot Open File editplus.exe",0
	   74 20 4F 70 65
	   6E 20 46 69 6C
	   65 20 65 64 69
	   74 70 6C 75 73
	   2E 65 78 65 00
 0000011B 45 52 52 4F 52	err2	db	'ERROR: File Size Mismatch',0
	   3A 20 46 69 6C
	   65 20 53 69 7A
	   65 20 4D 69 73
	   6D 61 74 63 68
	   00
 00000135 45 52 52 4F 52	err3	db	'ERROR: File already patched',0
	   3A 20 46 69 6C
	   65 20 61 6C 72
	   65 61 64 79 20
	   70 61 74 63 68
	   65 64 00
 00000151 53 55 43 43 45	success	db	'SUCCESS: File Patch Successful :)',0
	   53 53 3A 20 46
	   69 6C 65 20 50
	   61 74 63 68 20
	   53 75 63 63 65
	   73 73 66 75 6C
	   20 3A 29 00
 00000173 00126E00		size1	dd	1207808d
 00000177 00029AD7		offs	dd	00029ad7h,0006a964h
	   0006A964

 0000017F 75 75			data	db	75h,75h
 00000181 74 74			data1	db	74h,74h

 00000183 53 4F 46 54 57	okey	db	'SOFTWARE',0
	   41 52 45 00
 0000018C 45 53 2D 43 6F	fkey	db	'ES-Computing',0
	   6D 70 75 74 69
	   6E 67 00
 00000199 45 64 69 74 50	skey	db	'EditPlus 2',0
	   6C 75 73 20 32
	   00
 000001A4 49 6E 73 74 61	thkey	db	'Install',0
	   6C 6C 00
 000001AC 53 4F 46 54 57	tkey	db	'SOFTWARE\ES-Computing\EditPlus 2\Install',0
	   41 52 45 5C 45
	   53 2D 43 6F 6D
	   70 75 74 69 6E
	   67 5C 45 64 69
	   74 50 6C 75 73
	   20 32 5C 49 6E
	   73 74 61 6C 6C
	   00

 000001D5 20 00			null	db	' ',0

 000001D7 DB 89 29 18 E5	valdata	db	0dbh,89h,29h,18h,0e5h,5dh,0f0h,5dh,78h,9ch,63h,0cbh,4dh,4ch,0c9h,28h,2dh,62h,31h,30h,34h,72h,06h,00h,17h,7eh,03h,62h
	   5D F0 5D 78 9C
	   63 CB 4D 4C C9
	   28 2D 62 31 30
	   34 72 06 00 17
	   7E 03 62
 000001F3 4C 69 63 65 6E	val	db	"License",0
	   73 65 00
				;##########################################################
 = 00000002			IDEXIT		equ	2
 = 00000066			IDABOUT		equ	102
 = 00000067			IDSTAT		equ	103
 = 00000069			IDEDIT		equ	105
 = 00000001			IDCRACK		equ	1
 = 00000067			IDOK1		equ	103
				dlgproc		proto hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
				abtdlgproc 	proto hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
				;##########################################################
 00000000			.code                            
 00000000			start:                           
 00000000				invoke	GetModuleHandle,0
 00000000  6A 00	   *	    push   +000000000h
 00000002  E8 00000000 E   *	    call   GetModuleHandleA
 00000007  A3 00000000 R		mov	[hinst],eax
					invoke	DialogBoxParam,hinst,addr dialog,0,addr dlgproc,0
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  68 0000002C R   *	    push   dlgproc
 00000013  6A 00	   *	    push   +000000000h
 00000015  68 000000C4 R   *	    push   OFFSET dialog
 0000001A  FF 35 00000000 R *	    push   hinst
 00000020  E8 00000000 E   *	    call   DialogBoxParamA
					invoke	ExitProcess,0
 00000025  6A 00	   *	    push   +000000000h
 00000027  E8 00000000 E   *	    call   ExitProcess
				;##########################################################	
 0000002C 0000002C		dlgproc	proc hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
				local	hicon:HWND
				local	hfile:HWND		
				local	buthwnd:HWND
 0000002C  55		   *	    push   ebp
 0000002D  8B EC	   *	    mov    ebp, esp
 0000002F  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
					.if	uMsg==WM_INITDIALOG
 00000032  81 7D 0C
	   00000110	   *	    cmp    uMsg, WM_INITDIALOG
 00000039  75 39	   *	    jne    @C0001
						invoke	LoadIcon,hinst,addr icn
 0000003B  68 000000DD R   *	    push   OFFSET icn
 00000040  FF 35 00000000 R *	    push   hinst
 00000046  E8 00000000 E   *	    call   LoadIconA
 0000004B  89 45 FC				mov	hicon,eax
						invoke	SendMessage,hwnd,WM_SETICON,ICON_SMALL,hicon
 0000004E  FF 75 FC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFFCh
 00000051  6A 00	   *	    push   +000000000h
 00000053  68 00000080	   *	    push   +000000080h
 00000058  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000005B  E8 00000000 E   *	    call   SendMessageA
						invoke	SetDlgItemText,hwnd,IDEDIT,addr title1
 00000060  68 00000000 R   *	    push   OFFSET title1
 00000065  6A 69	   *	    push   +000000069h
 00000067  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000006A  E8 00000000 E   *	    call   SetDlgItemTextA
					.elseif	uMsg==WM_COMMAND
 0000006F  E9 0000025A	   *	    jmp    @C0003
 00000074		   *@C0001:
 00000074  81 7D 0C
	   00000111	   *	    cmp    uMsg, WM_COMMAND
 0000007B  0F 85 00000244  *	    jne    @C0004
 00000081  8B 45 10				mov	eax,wparam
						.if	ax==IDCRACK
 00000084  66| 83 F8 01	   *	    cmp    ax, IDCRACK
 00000088  0F 85 00000203  *	    jne    @C0006
							invoke	_lopen,offset file,OF_READWRITE
 0000008E  6A 02	   *	    push   +000000002h
 00000090  68 000000E3 R   *	    push   dword  ptr OFFSET FLAT:file
 00000095  E8 00000000 E   *	    call   _lopen
							.if	eax==-1
 0000009A  83 F8 FF	   *	    cmp    eax, - 001h
 0000009D  75 14	   *	    jne    @C0008
								invoke	SetDlgItemText,hwnd,IDSTAT,addr err1
 0000009F  68 000000FD R   *	    push   OFFSET err1
 000000A4  6A 67	   *	    push   +000000067h
 000000A6  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000A9  E8 00000000 E   *	    call   SetDlgItemTextA
							.else
 000000AE  E9 0000021B	   *	    jmp    @C000A
 000000B3		   *@C0008:
 000000B3  89 45 F8						mov	hfile,eax			
								invoke	GetDlgItem,hwnd,IDCRACK
 000000B6  6A 01	   *	    push   +000000001h
 000000B8  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000BB  E8 00000000 E   *	    call   GetDlgItem
 000000C0  89 45 F4						mov	buthwnd,eax
								invoke	GetFileSize,hfile,0
 000000C3  6A 00	   *	    push   +000000000h
 000000C5  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 000000C8  E8 00000000 E   *	    call   GetFileSize
								.if	eax!=size1
 000000CD  3B 05 00000173 R *	    cmp    eax, size1
 000000D3  74 14	   *	    je     @C000B
									invoke	SetDlgItemText,hwnd,IDSTAT,addr err2
 000000D5  68 0000011B R   *	    push   OFFSET err2
 000000DA  6A 67	   *	    push   +000000067h
 000000DC  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000DF  E8 00000000 E   *	    call   SetDlgItemTextA
								.else
 000000E4  E9 000001A6	   *	    jmp    @C000D
 000000E9		   *@C000B:
									invoke	_llseek,hfile,offs,FILE_BEGIN
 000000E9  6A 00	   *	    push   +000000000h
 000000EB  FF 35 00000177 R *	    push   offs
 000000F1  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 000000F4  E8 00000000 E   *	    call   _llseek
									invoke	_lread,hfile,offset buff,1
 000000F9  6A 01	   *	    push   +000000001h
 000000FB  68 00000004 R   *	    push   dword  ptr OFFSET FLAT:buff
 00000100  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000103  E8 00000000 E   *	    call   _lread
 00000108  A0 0000017F R						mov	al,data
									.if	buff!=al
 0000010D  38 05 00000004 R *	    cmp    buff, al
 00000113  74 14	   *	    je     @C000E
										invoke	SetDlgItemText,hwnd,IDSTAT,addr err3
 00000115  68 00000135 R   *	    push   OFFSET err3
 0000011A  6A 67	   *	    push   +000000067h
 0000011C  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000011F  E8 00000000 E   *	    call   SetDlgItemTextA
									.else
 00000124  E9 00000166	   *	    jmp    @C0010
 00000129		   *@C000E:
										invoke	_llseek,hfile,offs,FILE_BEGIN
 00000129  6A 00	   *	    push   +000000000h
 0000012B  FF 35 00000177 R *	    push   offs
 00000131  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000134  E8 00000000 E   *	    call   _llseek
										invoke	CopyFile,offset file,offset bfile,FALSE
 00000139  6A 00	   *	    push   +000000000h
 0000013B  68 000000F0 R   *	    push   dword  ptr OFFSET FLAT:bfile
 00000140  68 000000E3 R   *	    push   dword  ptr OFFSET FLAT:file
 00000145  E8 00000000 E   *	    call   CopyFileA
										invoke	_lwrite,hfile,offset data1,1
 0000014A  6A 01	   *	    push   +000000001h
 0000014C  68 00000181 R   *	    push   dword  ptr OFFSET FLAT:data1
 00000151  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000154  E8 00000000 E   *	    call   _lwrite
										
										invoke	_llseek,hfile,offs+4,FILE_BEGIN
 00000159  6A 00	   *	    push   +000000000h
 0000015B  FF 35 0000017B R *	    push   offs+000000004h
 00000161  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000164  E8 00000000 E   *	    call   _llseek
										invoke	_lwrite,hfile,offset data1+1,1
 00000169  6A 01	   *	    push   +000000001h
 0000016B  68 00000182 R   *	    push   dword  ptr OFFSET FLAT:data1+000000001h
 00000170  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000173  E8 00000000 E   *	    call   _lwrite
										
										invoke	RegOpenKeyEx,HKEY_LOCAL_MACHINE,offset tkey,0,KEY_ALL_ACCESS,offset oh
 00000178  68 00000005 R   *	    push   dword  ptr OFFSET FLAT:oh
 0000017D  68 000F003F	   *	    push   +0000F003Fh
 00000182  6A 00	   *	    push   +000000000h
 00000184  68 000001AC R   *	    push   dword  ptr OFFSET FLAT:tkey
 00000189  68 80000002	   *	    push   +080000002h
 0000018E  E8 00000000 E   *	    call   RegOpenKeyExA
										.if	eax!=ERROR_SUCCESS
 00000193  0B C0	   *	    or	eax, eax
 00000195  0F 84 000000AD  *	    je     @C0011
											invoke	RegOpenKeyEx,HKEY_LOCAL_MACHINE,offset okey,0,KEY_ALL_ACCESS,offset oh
 0000019B  68 00000005 R   *	    push   dword  ptr OFFSET FLAT:oh
 000001A0  68 000F003F	   *	    push   +0000F003Fh
 000001A5  6A 00	   *	    push   +000000000h
 000001A7  68 00000183 R   *	    push   dword  ptr OFFSET FLAT:okey
 000001AC  68 80000002	   *	    push   +080000002h
 000001B1  E8 00000000 E   *	    call   RegOpenKeyExA
											invoke	RegCreateKeyEx,oh,offset fkey,0,offset null,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,0,offset fh,0
 000001B6  6A 00	   *	    push   +000000000h
 000001B8  68 00000009 R   *	    push   dword  ptr OFFSET FLAT:fh
 000001BD  6A 00	   *	    push   +000000000h
 000001BF  68 000F003F	   *	    push   +0000F003Fh
 000001C4  6A 00	   *	    push   +000000000h
 000001C6  68 000001D5 R   *	    push   dword  ptr OFFSET FLAT:null
 000001CB  6A 00	   *	    push   +000000000h
 000001CD  68 0000018C R   *	    push   dword  ptr OFFSET FLAT:fkey
 000001D2  FF 35 00000005 R *	    push   oh
 000001D8  E8 00000000 E   *	    call   RegCreateKeyExA
											invoke	RegCreateKeyEx,fh,offset skey,0,offset null,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,0,offset sh,0
 000001DD  6A 00	   *	    push   +000000000h
 000001DF  68 0000000D R   *	    push   dword  ptr OFFSET FLAT:sh
 000001E4  6A 00	   *	    push   +000000000h
 000001E6  68 000F003F	   *	    push   +0000F003Fh
 000001EB  6A 00	   *	    push   +000000000h
 000001ED  68 000001D5 R   *	    push   dword  ptr OFFSET FLAT:null
 000001F2  6A 00	   *	    push   +000000000h
 000001F4  68 00000199 R   *	    push   dword  ptr OFFSET FLAT:skey
 000001F9  FF 35 00000009 R *	    push   fh
 000001FF  E8 00000000 E   *	    call   RegCreateKeyExA
											invoke	RegCreateKeyEx,sh,offset thkey,0,offset null,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,0,offset th,0
 00000204  6A 00	   *	    push   +000000000h
 00000206  68 00000011 R   *	    push   dword  ptr OFFSET FLAT:th
 0000020B  6A 00	   *	    push   +000000000h
 0000020D  68 000F003F	   *	    push   +0000F003Fh
 00000212  6A 00	   *	    push   +000000000h
 00000214  68 000001D5 R   *	    push   dword  ptr OFFSET FLAT:null
 00000219  6A 00	   *	    push   +000000000h
 0000021B  68 000001A4 R   *	    push   dword  ptr OFFSET FLAT:thkey
 00000220  FF 35 0000000D R *	    push   sh
 00000226  E8 00000000 E   *	    call   RegCreateKeyExA
											invoke	RegSetValueEx,th,offset val,0,REG_BINARY,offset valdata,28
 0000022B  6A 1C	   *	    push   +00000001Ch
 0000022D  68 000001D7 R   *	    push   dword  ptr OFFSET FLAT:valdata
 00000232  6A 03	   *	    push   +000000003h
 00000234  6A 00	   *	    push   +000000000h
 00000236  68 000001F3 R   *	    push   dword  ptr OFFSET FLAT:val
 0000023B  FF 35 00000011 R *	    push   th
 00000241  E8 00000000 E   *	    call   RegSetValueExA
										.else
 00000246  EB 1B	   *	    jmp    @C0013
 00000248		   *@C0011:
											invoke	RegSetValueEx,oh,offset val,0,REG_BINARY	,offset valdata,29
 00000248  6A 1D	   *	    push   +00000001Dh
 0000024A  68 000001D7 R   *	    push   dword  ptr OFFSET FLAT:valdata
 0000024F  6A 03	   *	    push   +000000003h
 00000251  6A 00	   *	    push   +000000000h
 00000253  68 000001F3 R   *	    push   dword  ptr OFFSET FLAT:val
 00000258  FF 35 00000005 R *	    push   oh
 0000025E  E8 00000000 E   *	    call   RegSetValueExA
										.endif
										
										invoke	RegCloseKey,fh
 00000263		   *@C0013:
 00000263  FF 35 00000009 R *	    push   fh
 00000269  E8 00000000 E   *	    call   RegCloseKey

										invoke	_lclose,hfile
 0000026E  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000271  E8 00000000 E   *	    call   _lclose
										
										
										invoke	SetDlgItemText,hwnd,IDSTAT,addr success
 00000276  68 00000151 R   *	    push   OFFSET success
 0000027B  6A 67	   *	    push   +000000067h
 0000027D  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000280  E8 00000000 E   *	    call   SetDlgItemTextA
										invoke	EnableWindow,buthwnd,FALSE
 00000285  6A 00	   *	    push   +000000000h
 00000287  FF 75 F4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF4h
 0000028A  E8 00000000 E   *	    call   EnableWindow
									.endif
								.endif																								
 0000028F		   *@C0010:
							.endif
 0000028F		   *@C000D:
						.elseif	ax==IDABOUT
 0000028F  EB 3D	   *	    jmp    @C0014
 00000291		   *@C0006:
 00000291  66| 83 F8 66	   *	    cmp    ax, IDABOUT
 00000295  75 1C	   *	    jne    @C0015
							invoke	DialogBoxParam,hinst,addr abtdlg,hwnd,addr abtdlgproc,0
 00000297  6A 00	   *	    push   +000000000h
 00000299  68 000002D7 R   *	    push   abtdlgproc
 0000029E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002A1  68 000000CD R   *	    push   OFFSET abtdlg
 000002A6  FF 35 00000000 R *	    push   hinst
 000002AC  E8 00000000 E   *	    call   DialogBoxParamA
						.elseif	ax==IDEXIT
 000002B1  EB 1B	   *	    jmp    @C0017
 000002B3		   *@C0015:
 000002B3  66| 83 F8 02	   *	    cmp    ax, IDEXIT
 000002B7  75 15	   *	    jne    @C0018
							invoke	EndDialog,hwnd,0
 000002B9  6A 00	   *	    push   +000000000h
 000002BB  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002BE  E8 00000000 E   *	    call   EndDialog
						.endif
					.else
 000002C3  EB 09	   *	    jmp    @C001A
 000002C5		   *@C0004:
 000002C5  B8 00000000				mov	eax,FALSE
						ret
 000002CA  C9		   *	    leave  
 000002CB  C2 0010	   *	    ret    00010h
					.endif
 000002CE		   *@C001A:
 000002CE		   *@C0003:
 000002CE		   *@C0018:
 000002CE		   *@C0017:
 000002CE		   *@C0014:
 000002CE		   *@C000A:
 000002CE  B8 00000001			mov	eax,TRUE
					ret
 000002D3  C9		   *	    leave  
 000002D4  C2 0010	   *	    ret    00010h
 000002D7			dlgproc	endp			                                 
				;##########################################################
 000002D7			abtdlgproc	proc hwnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
 000002D7  55		   *	    push   ebp
 000002D8  8B EC	   *	    mov    ebp, esp
					.if	uMsg==WM_COMMAND
 000002DA  81 7D 0C
	   00000111	   *	    cmp    uMsg, WM_COMMAND
 000002E1  75 15	   *	    jne    @C001B
 000002E3  8B 45 10				mov	eax,wparam
						.if	ax==IDOK1
 000002E6  66| 83 F8 67	   *	    cmp    ax, IDOK1
 000002EA  75 15	   *	    jne    @C001D
							invoke	EndDialog,hwnd,0
 000002EC  6A 00	   *	    push   +000000000h
 000002EE  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002F1  E8 00000000 E   *	    call   EndDialog
						.endif
					.else
 000002F6  EB 09	   *	    jmp    @C001F
 000002F8		   *@C001B:
 000002F8  B8 00000000				mov	eax,FALSE
						ret
 000002FD  C9		   *	    leave  
 000002FE  C2 0010	   *	    ret    00010h
					.endif
 00000301		   *@C001F:
 00000301		   *@C001D:
 00000301  B8 00000001			mov	eax,TRUE
					ret
 00000306  C9		   *	    leave  
 00000307  C2 0010	   *	    ret    00010h
 0000030A			abtdlgproc	endp								
				end	start	                 
