Microsoft (R) Macro Assembler Version 6.14.8444		    10/20/03 01:26:35
E:\PROGRA~1\WIN32ASM\crk\EXPOSE.asm			     Page 1 - 1


				.386                             
				.model	flat,stdcall             
				option 	casemap:none             
				.nolist
				.listall
				includelib user32.lib            
				includelib kernel32.lib          
 00000000			.data                            
 00000000 45 78 70 6F 73	about	db 	'Expose key generator by Madhur',0
	   65 20 6B 65 79
	   20 67 65 6E 65
	   72 61 74 6F 72
	   20 62 79 20 4D
	   61 64 68 75 72
	   00
 0000001F 45 78 70 6F 73	AppName	db	'Expose key generator',0
	   65 20 6B 65 79
	   20 67 65 6E 65
	   72 61 74 6F 72
	   00
 00000034 57 69 6E 2D 4F	cap	db	'Win-O-Expose key generator',13,10
	   2D 45 78 70 6F
	   73 65 20 6B 65
	   79 20 67 65 6E
	   65 72 61 74 6F
	   72 0D 0A
 00000050  43 6F 64 65 64		db	'Coded by Madhur in win32asm',0  
	   20 62 79 20 4D
	   61 64 68 75 72
	   20 69 6E 20 77
	   69 6E 33 32 61
	   73 6D 00
 0000006C 44 49 41 4C 4F	dialog	db	'DIALOG_1',0                      
	   47 5F 31 00
 00000075 6D 61 64 68 75	serial	db	'madhur',0
	   72 00
 0000007C  00000014 [		regkey	db	20 dup(0)
	    00
	   ]
 00000090 00			len	db	0
				dlgproc	proto :HWND,:UINT,:WPARAM,:LPARAM
 00000000			.data?                           
 00000000 00000000		hinst	HINSTANCE ?
 00000004 00000000		hwnd	HWND 	?
				;msg	MSG <?>
 00000008 00000000		edhwnd	HWND	?
 0000000C 00000000		hicon	HWND	?
 00000000			.CONST                           
 = 00000065			IDC_EDIT1	equ	101
 = 00000066			IDC_EDIT2	equ	102
 00000000			.code                            
 00000000			start:                           
 00000000				invoke	GetModuleHandle,0
 00000000  6A 00	   *	    push   +000000000h
 00000002  E8 00000000 E   *	    call   GetModuleHandleA
 00000007  A3 00000000 R		mov	hinst,eax
					invoke	DialogBoxParam,hinst,addr dialog,0,addr dlgproc,0
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  68 00000031 R   *	    push   dlgproc
 00000013  6A 00	   *	    push   +000000000h
 00000015  68 0000006C R   *	    push   OFFSET dialog
 0000001A  FF 35 00000000 R *	    push   hinst
 00000020  E8 00000000 E   *	    call   DialogBoxParamA
 00000025  A3 00000004 R		mov	hwnd,eax
					invoke	ExitProcess,0            
 0000002A  6A 00	   *	    push   +000000000h
 0000002C  E8 00000000 E   *	    call   ExitProcess

 00000031 00000031		dlgproc	proc hWnd:HWND,uMsg:UINT,wparam:WPARAM,lparam:LPARAM
 00000031  55		   *	    push   ebp
 00000032  8B EC	   *	    mov    ebp, esp
					.if	uMsg==WM_INITDIALOG                     
 00000034  81 7D 0C
	   00000110	   *	    cmp    uMsg, WM_INITDIALOG
 0000003B  75 28	   *	    jne    @C0001
						invoke	SetDlgItemText,hWnd,IDC_EDIT1,addr serial
 0000003D  68 00000075 R   *	    push   OFFSET serial
 00000042  6A 65	   *	    push   +000000065h
 00000044  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000047  E8 00000000 E   *	    call   SetDlgItemTextA
 0000004C  E8 000000D9				call	getit
						invoke	SetDlgItemText,hWnd,IDC_EDIT2,addr regkey
 00000051  68 0000007C R   *	    push   OFFSET regkey
 00000056  6A 66	   *	    push   +000000066h
 00000058  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000005B  E8 00000000 E   *	    call   SetDlgItemTextA
					.elseif	uMsg==WM_SETICON
 00000060  E9 000000BC	   *	    jmp    @C0003
 00000065		   *@C0001:
 00000065  81 7D 0C
	   00000080	   *	    cmp    uMsg, WM_SETICON
 0000006C  75 1A	   *	    jne    @C0004
						invoke	LoadIcon,hinst,IDI_APPLICATION
 0000006E  68 00007F00	   *	    push   +000007F00h
 00000073  FF 35 00000000 R *	    push   hinst
 00000079  E8 00000000 E   *	    call   LoadIconA
 0000007E  A3 0000000C R			mov	hicon,eax
					.elseif	uMsg==WM_COMMAND
 00000083  E9 00000099	   *	    jmp    @C0006
 00000088		   *@C0004:
 00000088  81 7D 0C
	   00000111	   *	    cmp    uMsg, WM_COMMAND
 0000008F  0F 85 00000083  *	    jne    @C0007
 00000095  8B 45 10				mov	eax,wparam
						.if	ax==IDC_EDIT1
 00000098  66| 83 F8 65	   *	    cmp    ax, IDC_EDIT1
 0000009C  75 46	   *	    jne    @C0009
 0000009E  C1 E8 10					shr	eax,16
							.if	ax==EN_CHANGE
 000000A1  66| 3D 0300	   *	    cmp    ax, EN_CHANGE
 000000A5  75 7A	   *	    jne    @C000B
								invoke	GetDlgItemText,hWnd,IDC_EDIT1,addr serial,20
 000000A7  6A 14	   *	    push   +000000014h
 000000A9  68 00000075 R   *	    push   OFFSET serial
 000000AE  6A 65	   *	    push   +000000065h
 000000B0  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000B3  E8 00000000 E   *	    call   GetDlgItemTextA
								invoke	lstrlen,addr serial
 000000B8  68 00000075 R   *	    push   OFFSET serial
 000000BD  E8 00000000 E   *	    call   lstrlenA
								.if	eax!=0
 000000C2  0B C0	   *	    or	eax, eax
 000000C4  74 1C	   *	    je     @C000D
 000000C6  E8 0000005F							call 	getit                               
 000000CB  8B 45 14							mov	eax,lparam
 000000CE  A3 00000008 R						mov	edhwnd,eax
									;invoke	SetWindowText,edhwnd,addr regkey
									invoke	SetDlgItemText,hWnd,IDC_EDIT2,addr regkey
 000000D3  68 0000007C R   *	    push   OFFSET regkey
 000000D8  6A 66	   *	    push   +000000066h
 000000DA  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000DD  E8 00000000 E   *	    call   SetDlgItemTextA
								.endif
							.endif
 000000E2		   *@C000D:
						.elseif	ax==1
 000000E2  EB 3D	   *	    jmp    @C000F
 000000E4		   *@C0009:
 000000E4  66| 83 F8 01	   *	    cmp    ax, 001h
 000000E8  75 1C	   *	    jne    @C0010
							invoke	MessageBox,hwnd,offset cap,offset AppName,MB_ICONINFORMATION or MB_SYSTEMMODAL
 000000EA  68 00001040	   *	    push   +000001040h
 000000EF  68 0000001F R   *	    push   dword  ptr OFFSET FLAT:AppName
 000000F4  68 00000034 R   *	    push   dword  ptr OFFSET FLAT:cap
 000000F9  FF 35 00000004 R *	    push   hwnd
 000000FF  E8 00000000 E   *	    call   MessageBoxA
						.elseif	ax==2
 00000104  EB 1B	   *	    jmp    @C0012
 00000106		   *@C0010:
 00000106  66| 83 F8 02	   *	    cmp    ax, 002h
 0000010A  75 15	   *	    jne    @C0013
							invoke	EndDialog,hWnd,0
 0000010C  6A 00	   *	    push   +000000000h
 0000010E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000111  E8 00000000 E   *	    call   EndDialog
						.endif
					.else
 00000116  EB 09	   *	    jmp    @C0015
 00000118		   *@C0007:
 00000118  B8 00000000				mov	eax,FALSE
						ret
 0000011D  C9		   *	    leave  
 0000011E  C2 0010	   *	    ret    00010h
					.endif
 00000121		   *@C0015:
 00000121		   *@C0006:
 00000121		   *@C0003:
 00000121		   *@C0013:
 00000121		   *@C0012:
 00000121		   *@C000F:
 00000121		   *@C000B:
 00000121  B8 00000001			mov	eax,TRUE
					ret
 00000126  C9		   *	    leave  
 00000127  C2 0010	   *	    ret    00010h
 0000012A			dlgproc	endp			                                 
				                                 

 0000012A			getit proc 
				local	pass:DWORD
 0000012A  55		   *	    push   ebp
 0000012B  8B EC	   *	    mov    ebp, esp
 0000012D  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000130  C7 45 FC			mov	pass,0f422c070h	
	   F422C070
 00000137  60				pusha
					invoke	lstrlen,addr serial
 00000138  68 00000075 R   *	    push   OFFSET serial
 0000013D  E8 00000000 E   *	    call   lstrlenA
 00000142  A2 00000090 R		mov	len,al
 00000147  8B C8			mov	ecx,eax
 00000149  8D 35 00000075 R		lea	esi,serial
 0000014F			caps:
 0000014F  8A 06			mov	al,[esi]
 00000151  3C 61			cmp	al,61h
 00000153  72 02			jnae	cont3
 00000155  2C 20			sub	al,20h              ;convert to uppercase
 00000157			cont3:
 00000157  88 06			mov	[esi],al
 00000159  46				inc 	esi
 0000015A  E2 F3			loop	caps

 0000015C  33 C0			xor	eax,eax
 0000015E  33 C9			xor	ecx,ecx
 00000160  33 F6			xor	esi,esi
 00000162  33 D2			xor	edx,edx 
 00000164  33 DB			xor	ebx,ebx
 00000166  0F B6 1D			movzx	ebx,len
	   00000090 R
 0000016D  BF F422C070			mov	edi,0f422c070h  ;very imp

 00000172			calc:
 00000172  0F BE 86			movsx	eax,byte ptr [serial+esi]
	   00000075 R
 00000179  83 F8 20			cmp	eax,20h
 0000017C  74 18			je	space
 0000017E  0F AF C6			imul	eax,esi
 00000181  8B C8			mov	ecx,eax
 00000183  8D 04 40			lea	eax,dword ptr [eax+eax*2]
 00000186  C1 E0 03			shl	eax,3h
 00000189  8D 14 C1			lea	edx,dword ptr [ecx+eax*8]
 0000018C  8D 04 92			lea	eax,dword ptr [edx+edx*4]
 0000018F  03 C1			add	eax,ecx
 00000191  F7 D8			neg	eax
 00000193  01 45 FC			add	pass,eax
 00000196			space:
 00000196  46				inc	esi          
 00000197  3B F3			cmp	esi,ebx
 00000199  75 D7			jne	calc                ;conversion routine

 0000019B  66| BB 0010			mov	bx,10h
 0000019F  66| 33 F6			xor	si,si
 000001A2			loop0:
 000001A2  66| 36: 8B 44 2E		mov	ax,word ptr [pass+esi]
	   FC
 000001A8  66| B9 0004			mov	cx,4h
 000001AC			loop1:
 000001AC  66| 33 D2			xor	dx,dx
 000001AF  66| F7 FB			idiv	bx
 000001B2  66| 52			push	dx        ;remainder in ah
 000001B4  E2 F6			loop	loop1
 000001B6  66| 46			inc	si
 000001B8  66| 46			inc	si
 000001BA  66| 83 FE 04			cmp	si,4h
 000001BE  75 E2			jne	loop0           ;each hex digit pushed on to the stack
					
 000001C0  66| B9 0008			mov	cx,8h
 000001C4  66| 33 F6			xor	si,si

 000001C7			loop2:
 000001C7  66| 58			pop	ax
 000001C9  3C 09			cmp	al,9h
 000001CB  77 04			ja	char
 000001CD  04 30			add	al,30h
 000001CF  EB 02			jmp	cont
 000001D1			char:
 000001D1  04 37			add	al,37h
 000001D3			cont:
 000001D3  88 04 35			mov	[regkey+si],al
	   0000007C R
 000001DA  66| 46			inc	si
 000001DC  E2 E9			loop	loop2                 ;each item popped,converted and saved in array	
 000001DE  C6 04 35			mov	[regkey+si],0 
	   0000007C R 00
 000001E6  61				popa
					ret
 000001E7  C9		   *	    leave  
 000001E8  C3		   *	    ret    00000h
 000001E9			getit	endp                            
				end	start	                 
