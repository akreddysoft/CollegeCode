Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 1
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



      1					     IDEAL
      2	0000				     MODEL   small
      3	      =	0		     ASCnull	     EQU     0		     ; ASCII null character
      4
      5	0000				     DATASEG
      6	0000  0A*(00)		     buff    db	     10	dup(0)
      7	000A				     CODESEG
      8	0000			     start:
      9	0000  B8 0000s			     mov     ax,_data
     10	0003  8E D8			     mov     ds,ax
     11
     12	0005  B8 1234			     mov     ax,1234h
     13	0008  BB 0002			     mov     bx,2
     14	000B  B9 0004			     mov     cx,4
     15	000E  BF 0000r			     lea     di,[buff]
     16	0011  E8 007E			     call    bintoaschex
     17
     18
     19
     20
     21
     22
     23	0014  B8 4C00			     mov     ax,4c00h
     24	0017  CD 21			     int     21h
     25
     26
     27
     28
     29
     30
     31	0019			     PROC    StrLength
     32	0019  50			     push    ax		     ; Save modified registers
     33	001A  57			     push    di
     34
     35	001B  32 C0			     xor     al, al	     ; al <- search char (null)
     36	001D  B9 FFFF			     mov     cx, 0ffffh	     ; cx <- maximum search depth
     37	0020  FC			     cld		     ; Auto-increment di
     38	0021  F2> AE			     repnz   scasb	     ; Scan for	al while [di]<>null & cx<>0
     39	0023  F7 D1			     not     cx		     ; Ones complement of cx
     40	0025  49			     dec     cx		     ;	minus 1	equals string length
     41
     42	0026  5F			     pop     di		     ; Restore registers
     43	0027  58			     pop     ax
     44	0028  C3			     ret		     ; Return to caller
     45	0029			     ENDP    StrLength
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 2
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



     46				     %NEWPAGE
     47				     ;---------------------------------------------------------------
     48				     ; StrUpper	     Convert chars in string to	uppercase
     49				     ;---------------------------------------------------------------
     50				     ; Input:
     51				     ;	     di	= address of string to convert (s)
     52				     ; Output:
     53				     ;	     lowercase chars in	string converted to uppercase
     54				     ; Registers:
     55				     ;	     none
     56				     ;---------------------------------------------------------------
     57	0029			     PROC    StrUpper
     58	0029  50			     push    ax		     ; Save modified registers
     59	002A  51			     push    cx
     60	002B  57			     push    di
     61	002C  56			     push    si
     62	002D  E8 FFE9			     call    StrLength	     ; Set cx =	length of string
     63	0030  E3 11			     jcxz    @@99	     ; Exit if length =	0
     64	0032  FC			     cld		     ; Auto-increment si, di
     65	0033  8B F7			     mov     si, di	     ; Set si =	di
     66	0035			     @@10:
     67	0035  AC			     lodsb		     ; al <- s[si]; si <- si + 1
     68	0036  3C 61			     cmp     al, 'a'	     ; Is al >=	'a'?
     69	0038  72 06			     jb	     @@20	     ; No, jump	to continue scan
     70	003A  3C 7A			     cmp     al, 'z'	     ; Is al <=	'z'?
     71	003C  77 02			     ja	     @@20	     ; No, jump	to continue scan
     72	003E  2C 20			     sub     al, 'a'-'A'     ; Convert lowercase to uppercase
     73	0040			     @@20:
     74	0040  AA			     stosb		     ; s[di] <-	al; di <- di + 1
     75	0041  E2 F2			     loop    @@10	     ; cx <- cx	- 1; loop if cx	<> 0
     76	0043			     @@99:
     77	0043  5E			     pop     si		     ; Restore registers
     78	0044  5F			     pop     di
     79	0045  59			     pop     cx
     80	0046  58			     pop     ax
     81	0047  C3			     ret		     ; Return to caller
     82	0048			     ENDP    StrUpper
     83
     84
     85
     86
     87				     ;---------------------------------------------------------------
     88				     ; HexDigit	     Convert 4-bit value to ASCII digit
     89				     ;---------------------------------------------------------------
     90				     ; Input:
     91				     ;	     dl	= value	limited	to range 0..15
     92				     ; Output:
     93				     ;	     dl	= ASCII	hex digit equivalent
     94				     ; Registers:
     95				     ;	     dl
     96				     ;---------------------------------------------------------------
     97	0048			     PROC    HexDigit
     98	0048  80 FA 0A			     cmp     dl, 10	     ; Is dl < 10 (i.e.	hex 'A')?
     99	004B  72 04			     jb	     @@10	     ; If yes, jump
    100	004D  80 C2 37			     add     dl, 'A'-10	     ; Else convert to A, B, C,	D, E, or F
    101	0050  C3			     ret		     ; Return to caller
    102	0051			     @@10:
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 3
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    103	0051  80 CA 30			     or	     dl, '0'	     ; Convert digits 0	to 9
    104	0054  C3			     ret		     ; Return to caller
    105	0055			     ENDP    HexDigit
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 4
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    106				     %NEWPAGE
    107				     ;---------------------------------------------------------------
    108				     ; ValCh	     Convert ASCII digit char to binary	value
    109				     ;---------------------------------------------------------------
    110				     ; Input:
    111				     ;	     dl	= ASCII	digit '0'..'9';	'A'..'F'
    112				     ;	     bx	= base (2=binary, 10=decimal, 16=hexadecimal)
    113				     ; Output:
    114				     ;	     cf	= 0: dx	= equivalent binary value
    115				     ;	     cf	= 1: bad char for this number base (dx is meaningless)
    116				     ; Registers:
    117				     ;	     dx
    118				     ;---------------------------------------------------------------
    119	0055			     PROC    ValCh
    120	0055  80 FA 39			     cmp     dl, '9'	     ; Check for possible hex digit
    121	0058  76 03			     jbe     @@10	     ; Probably	'0'..'9', jump
    122	005A  80 EA 07			     sub     dl, 7	     ; Adjust hex digit	to 3A..3F range
    123	005D			     @@10:
    124	005D  80 EA 30			     sub     dl, '0'	     ; Convert ASCII to	decimal
    125	0060  F6 C2 F0			     test    dl, 0f0h	     ; Check 4 msbs (sets cf=0)
    126	0063  75 04			     jnz     @@99	     ; Jump  if	error (not digit or A-F)
    127
    128	0065  32 F6			     xor     dh, dh	     ; Convert byte in dl to word in dx
    129	0067  3B D3			     cmp     dx, bx	     ; Compare to number base (cf=1 if ok)
    130	0069			     @@99:
    131	0069  F5			     cmc		     ; Complement cf to	set/reset err flag
    132	006A  C3			     ret		     ; Return to caller
    133	006B			     ENDP    ValCh
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 5
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    134				     %NEWPAGE
    135				     ;---------------------------------------------------------------
    136				     ; NumToASCII    Convert unsigned binary value to ASCII
    137				     ;---------------------------------------------------------------
    138				     ; Input:
    139				     ;	     ax	= 16-bit value to convert
    140				     ;	     bx	= base for result (2=binary;10=decimal;16=hex)
    141				     ;	     cx	= minimum number of digits to output
    142				     ;	     di	= address of string to hold result
    143				     ;	     Note: assumes string is large enough to hold result
    144				     ;	     Note: creates full	result if cx is	less than the number
    145				     ;		   of digits required to specify the result or cx = 0
    146				     ;	     Note: if cx=0 and ax=0 then length	of string will be 0
    147				     ;		   set cx=1 if you want	string to = '0'	if ax=0
    148				     ;	     Note: assumes (2<=bx<=16)
    149				     ; Output:
    150				     ;	     none
    151				     ; Registers:
    152				     ;	     ax, cx
    153				     ;---------------------------------------------------------------
    154	006B			     PROC    NumToASCII		     ; Normal entry point
    155	006B  52			     push    dx		     ; Save some modified registers
    156	006C  57			     push    di
    157	006D  56			     push    si
    158
    159				     ; si = count of digits on stack
    160
    161	006E  33 F6			     xor     si, si	     ; Set digit-count to zero
    162	0070  E3 0B			     jcxz    @@20	     ; If cx=0,	jump to	set cx=1
    163	0072			     @@10:
    164	0072  33 D2			     xor     dx, dx	     ; Extend ax to 32-bit dxax
    165	0074  F7 F3			     div     bx		     ; ax<-axdx	div bx;	dx<-remainder
    166	0076  E8 FFCF			     call    HexDigit	     ; Convert dl to ASCII digit
    167	0079  52			     push    dx		     ; Save digit on stack
    168	007A  46			     inc     si		     ; Count digits on stack
    169	007B  E2 F5			     loop    @@10	     ; Loop on minimum digit count
    170	007D			     @@20:
    171	007D  41			     inc     cx		     ; Set cx =	1 in case not done
    172	007E  0B C0			     or	     ax, ax	     ; Is ax = 0? (all digits done)
    173	0080  75 F0			     jnz     @@10	     ; If ax <>	0, continue conversion
    174	0082  8B CE			     mov     cx, si	     ; Set cx to stack char count
    175	0084  E3 05			     jcxz    @@40	     ; Skip next loop if cx=0000
    176	0086  FC			     cld		     ; Auto-increment di for stosb
    177	0087			     @@30:
    178	0087  58			     pop     ax		     ; Pop next	digit into al
    179	0088  AA			     stosb		     ; Store digit in string; advance di
    180	0089  E2 FC			     loop    @@30	     ; Loop for	cx digits
    181	008B			     @@40:
    182	008B  C6 05 00			     mov     [byte di],	ASCnull	     ; Store null at end of string
    183	008E  5E			     pop     si		     ; Restore saved registers
    184	008F  5F			     pop     di
    185	0090  5A			     pop     dx
    186
    187	0091  C3			     ret		     ; Return to caller
    188	0092			     ENDP    NumToASCII
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 6
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    189				     %NEWPAGE
    190				     ;---------------------------------------------------------------
    191				     ; BinToAscHex   Convert binary values to ASCII hex	strings
    192				     ;---------------------------------------------------------------
    193				     ; Input:
    194				     ;	     ax	= 16-bit value to convert
    195				     ;	     cx	= minimum number of digits to output
    196				     ;	     di	= address of string to hold result
    197				     ;	     Note: assumes string is large enough to hold result
    198				     ;	     Note: outputs full	result if cx is	less than the number
    199				     ;		   of digits required to specify the result
    200				     ; Output:
    201				     ;	     none
    202				     ; Registers:
    203				     ;	     ax, cx
    204				     ;---------------------------------------------------------------
    205	0092			     PROC    BinToAscHex
    206	0092  53			     push    bx		     ; Save bx on stack
    207	0093  BB 0010			     mov     bx, 16	     ; Set base	= 16 (hex)
    208	0096  E8 FFD2			     call    NumToAscii	     ; Convert ax to ASCII
    209	0099  5B			     pop     bx		     ; Restore bx
    210	009A  C3			     ret		     ; Return to caller
    211	009B			     ENDP    BinToAscHex
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 7
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    212				     %NEWPAGE
    213				     ;---------------------------------------------------------------
    214				     ; BinToAscDec   Convert binary values to ASCII decimal strings
    215				     ;---------------------------------------------------------------
    216				     ; Input:
    217				     ;	     Same as BinToAscHex
    218				     ; Output:
    219				     ;	     none
    220				     ; Registers:
    221				     ;	     ax, cx (indirectly)
    222				     ;---------------------------------------------------------------
    223	009B			     PROC    BinToAscDec
    224	009B  53			     push    bx		     ; Save bx on stack
    225	009C  BB 000A			     mov     bx, 10	     ; Set base	= 10 (decimal)
    226	009F  E8 FFC9			     call    NumToAscii	     ; Convert ax to ASCII
    227	00A2  5B			     pop     bx		     ; Restore bx
    228	00A3  C3			     ret		     ; Return to caller
    229	00A4			     ENDP    BinToAscDec
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 8
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    230				     %NEWPAGE
    231				     ;---------------------------------------------------------------
    232				     ; SBinToAscDec  Convert signed binary to ASCII decimal strings
    233				     ;---------------------------------------------------------------
    234				     ; Input:
    235				     ;	     Same as BinToAscHex (ax = signed 16-bit value)
    236				     ; Output:
    237				     ;	     none
    238				     ; Registers:
    239				     ;	     ax, cx
    240				     ;---------------------------------------------------------------
    241	00A4			     PROC    SBinToAscDec
    242	00A4  53			     push    bx			     ; Save bx and di
    243	00A5  57			     push    di
    244	00A6  3D 0000			     cmp     ax, 0		     ; Is signed ax < 0?
    245	00A9  7D 06			     jge     @@10		     ; Jump if ax >= 0
    246	00AB  F7 D8			     neg     ax			     ; Form twos complement of ax
    247	00AD  C6 05 2D			     mov     [byte di],	'-'	     ; Insert '-' in string
    248	00B0  47			     inc     di			     ; Advance string pointer
    249	00B1			     @@10:
    250	00B1  BB 000A			     mov     bx, 10		     ; Set base	= 10 (decimal)
    251	00B4  E8 FFB4			     call    NumToAscii		     ; Convert ax to ASCII
    252	00B7  5F			     pop     di			     ; Restore bx and di
    253	00B8  5B			     pop     bx
    254	00B9  C3			     ret			     ; Return to caller
    255	00BA			     ENDP    SBinToAscDec
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 9
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    256				     %NEWPAGE
    257				     ;---------------------------------------------------------------
    258				     ; BinToAscBin   Convert binary values to ASCII binary strings
    259				     ;---------------------------------------------------------------
    260				     ; Input:
    261				     ;	     Same as BinToAscHex
    262				     ; Output:
    263				     ;	     none
    264				     ; Registers:
    265				     ;	     ax, cx (indirectly)
    266				     ;---------------------------------------------------------------
    267	00BA			     PROC    BinToAscBin
    268	00BA  53			     push    bx		     ; Save bx on stack
    269	00BB  BB 0002			     mov     bx, 2	     ; Set base	= 2 (binary)
    270	00BE  E8 FFAA			     call    NumToAscii	     ; Convert ax to ASCII
    271	00C1  5B			     pop     bx		     ; Restore bx
    272	00C2  C3			     ret		     ; Return to caller
    273	00C3			     ENDP    BinToAscBin
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 10
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    274				     %NEWPAGE
    275				     ;---------------------------------------------------------------
    276				     ; ChToBase	     Return number base	for string
    277				     ;---------------------------------------------------------------
    278				     ; Note:
    279				     ;	     Private subroutine	for AscToBin. Don't call directly.
    280				     ; Input:
    281				     ;	     si	= pointer to null terminator at	end of string
    282				     ;	     Note: assumes length of string >= 1
    283				     ; Output:
    284				     ;	     bx	= 2(binary), 10(decimal/default), 16(hexadecimal)
    285				     ;	     si	= address of last probable digit character in string
    286				     ; Registers:
    287				     ;	     bx, dl, si
    288				     ;---------------------------------------------------------------
    289	00C3			     PROC    ChToBase
    290	00C3  8A 54 FF			     mov     dl, [byte si-1]   ; Get last char of string
    291	00C6  BB 0010			     mov     bx, 16	     ; Preset base to 16 (hexadecimal)
    292	00C9  80 FA 48			     cmp     dl, 'H'	     ; Is it a hex string?
    293	00CC  74 10			     je	     @@10	     ; Jump if hex
    294	00CE  BB 0002			     mov     bx, 2	     ; Preset base to 2	(binary)
    295	00D1  80 FA 42			     cmp     dl, 'B'	     ; Is it a binary string?
    296	00D4  74 08			     je	     @@10	     ; Jump if binary
    297	00D6  BB 000A			     mov     bx, 10	     ; Preset base to 10 (decimal)
    298	00D9  80 FA 44			     cmp     dl, 'D'	     ; Is it a decimal string?
    299	00DC  75 01			     jne     @@20	     ; Jump if NOT decimal
    300	00DE			     @@10:
    301	00DE  4E			     dec     si		     ; Adjust si to last probable digit
    302	00DF			     @@20:
    303	00DF  C3			     ret		     ; Return to caller
    304	00E0			     ENDP    ChToBase
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 11
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    305				     %NEWPAGE
    306				     ;---------------------------------------------------------------
    307				     ; AscToNum	     Convert ASCII characters to binary
    308				     ;---------------------------------------------------------------
    309				     ; Note:
    310				     ;	     Private subroutine	for AscToBin. Don't call directly.
    311				     ; Input:
    312				     ;	     ax	= initial value	(0)
    313				     ;	     bx	= number base (2=binary, 10=decimal, 16=hexadecimal)
    314				     ;	     di	= address of unsigned string (any format)
    315				     ;	     si	= address of last probable digit char in string
    316				     ; Output:
    317				     ;	     cf	= 0 : ax = unsigned value
    318				     ;	     cf	= 1 : bad character in string (ax is meaningless)
    319				     ; Registers:
    320				     ;	     ax, cx, dx, si
    321				     ;---------------------------------------------------------------
    322	00E0			     PROC    AscToNum
    323	00E0  B9 0001			     mov     cx, 1	     ; Initialize multiplier
    324	00E3			     @@10:
    325	00E3  3B F7			     cmp     si, di	     ; At front	of string?
    326	00E5  74 14			     je	     @@99	     ; Exit if at front	(cf=0)
    327	00E7  4E			     dec     si		     ; Do next char to left
    328	00E8  8A 14			     mov     dl, [byte si]   ; Load char into dl
    329	00EA  E8 FF68			     call    ValCh	     ; Convert dl to value in dx
    330	00ED  72 0C			     jc	     @@99	     ; Exit if error (bad char)
    331	00EF  51			     push    cx		     ; Save cx on stack
    332	00F0  91			     xchg    ax, cx	     ; ax=multiplier; cx=partial value
    333	00F1  F7 E2			     mul     dx		     ; dxax <- digit value * multiplier
    334	00F3  03 C8			     add     cx, ax	     ; cx <- cx	+ ax (new partial value)
    335	00F5  58			     pop     ax		     ; Restore multiplier to ax
    336	00F6  F7 E3			     mul     bx		     ; dxax <- multiplier * base
    337	00F8  91			     xchg    ax, cx	     ; ax=partial value; cx=new	multiplier
    338	00F9  EB E8			     jmp     @@10	     ; do next digit
    339	00FB			     @@99:
    340	00FB  C3			     ret		     ; Return to caller
    341	00FC			     ENDP    AscToNum
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 12
D:\PROGRA~2\ASSEMBLY\LIBS\STR.asm



    342				     %NEWPAGE
    343				     ;---------------------------------------------------------------
    344				     ; AscToBin	     Convert ASCII strings to binary values
    345				     ;---------------------------------------------------------------
    346				     ; Input:
    347				     ;	     di	= ASCIIZ string	to convert to binary
    348				     ;		  'H' at end of	string = hexadecimal
    349				     ;		  'B' at end of	string = binary
    350				     ;		  'D' or digit at end of string	= decimal
    351				     ;		  '-' at s[0] indicates	negative number
    352				     ;	     Note: no blanks allowed in	string
    353				     ; Output:
    354				     ;	     cf	= 1 : bad character in string (ax undefined)
    355				     ;	     cf	= 0 : ax = value of string
    356				     ;	     Note: chars in string converted to	uppercase
    357				     ;	     Note: null	strings	set ax to zero
    358				     ; Registers:
    359				     ;	     ax
    360				     ;---------------------------------------------------------------
    361	00FC			     PROC    AscToBin
    362	00FC  53			     push    bx		     ; Save modified registers
    363	00FD  51			     push    cx		     ; (some of	these are changed
    364	00FE  52			     push    dx		     ;	in subroutines called by
    365	00FF  56			     push    si		     ;	this procedure)
    366
    367	0100  E8 FF26			     call    StrUpper	     ; Convert string to uppercase
    368	0103  E8 FF13			     call    StrLength	     ; Set cx to Length	of string at di
    369	0106  33 C0			     xor     ax, ax	     ; Initialize result to zero (cf=0)
    370	0108  E3 1B			     jcxz    @@99	     ; Exit if length =	0.  ax=0, cf=0
    371	010A  8B F7			     mov     si, di	     ; Address string at di with si
    372	010C  03 F1			     add     si, cx	     ; Advance si to null at end of string
    373	010E  80 3D 2D			     cmp     [byte di],	'-'  ; Check for minus sign
    374	0111  9C			     pushf		     ; Save result of compare
    375	0112  75 01			     jne     @@10	     ; Jump if minus sign not found
    376	0114  47			     inc     di		     ; Advance di past minus sign
    377	0115			     @@10:
    378	0115  E8 FFAB			     call    ChToBase	     ; Set bx=number base; si to last digit
    379	0118  E8 FFC5			     call    AscToNum	     ; Convert ASCII (base bx) to number
    380	011B  D1 D3			     rcl     bx, 1	     ; Preserve	cf by shifting into bx
    381	011D  9D			     popf		     ; Restore flags from minus-sign check
    382	011E  75 03			     jne     @@20	     ; Jump if minus sign was not found
    383	0120  F7 D8			     neg     ax		     ;	else form twos complement of ax
    384	0122  4F			     dec     di		     ;	and restore di to head of string
    385	0123			     @@20:
    386	0123  D1 DB			     rcr     bx, 1	     ; Restore cf result from AscToNum
    387	0125			     @@99:
    388	0125  5E			     pop     si		     ; Restore registers
    389	0126  5A			     pop     dx
    390	0127  59			     pop     cx
    391	0128  5B			     pop     bx
    392	0129  C3			     ret		     ; Return to caller
    393	012A			     ENDP    AscToBin
    394
    395					     END start			  ; End	of module
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 13
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "08/06/03"
??FILENAME		Text   "STR	"
??TIME			Text   "10:21:25"
??VERSION		Number 040A
@32BIT			Text   0			   #2
@@10			Near   _TEXT:0035		   #66	75
@@10			Near   _TEXT:0051		   99  #102
@@10			Near   _TEXT:005D		   121	#123
@@10			Near   _TEXT:0072		   #163	 169  173
@@10			Near   _TEXT:00B1		   245	#249
@@10			Near   _TEXT:00DE		   293	296  #300
@@10			Near   _TEXT:00E3		   #324	 338
@@10			Near   _TEXT:0115		   375	#377
@@20			Near   _TEXT:0040		   69  71  #73
@@20			Near   _TEXT:007D		   162	#170
@@20			Near   _TEXT:00DF		   299	#302
@@20			Near   _TEXT:0123		   382	#385
@@30			Near   _TEXT:0087		   #177	 180
@@40			Near   _TEXT:008B		   175	#181
@@99			Near   _TEXT:0043		   63  #76
@@99			Near   _TEXT:0069		   126	#130
@@99			Near   _TEXT:00FB		   326	330  #339
@@99			Near   _TEXT:0125		   370	#387
@CODE			Text   _TEXT			   #2  #2  #7
@CODESIZE		Text   0			   #2
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #5  #7
@DATA			Text   DGROUP			   #2
@DATASIZE		Text   0			   #2
@FILENAME		Text   STR
@INTERFACE		Text   000H			   #2
@MODEL			Text   2			   #2
@STACK			Text   DGROUP			   #2
@WORDSIZE		Text   2			   #5  #7
ASCNULL			Text   0			   #3  182
ASCTOBIN		Near   _TEXT:00FC		   #361
ASCTONUM		Near   _TEXT:00E0		   #322	 379
BINTOASCBIN		Near   _TEXT:00BA		   #267
BINTOASCDEC		Near   _TEXT:009B		   #223
BINTOASCHEX		Near   _TEXT:0092		   16  #205
BUFF			Byte   DGROUP:0000		   #6  15
CHTOBASE		Near   _TEXT:00C3		   #289	 378
HEXDIGIT		Near   _TEXT:0048		   #97	166
NUMTOASCII		Near   _TEXT:006B		   #154	 208  226  251	270
SBINTOASCDEC		Near   _TEXT:00A4		   #241
START			Near   _TEXT:0000		   #8  395
STRLENGTH		Near   _TEXT:0019		   #31	62  368
STRUPPER		Near   _TEXT:0029		   #57	367
VALCH			Near   _TEXT:0055		   #119	 329
Turbo Assembler	 Version 4.1	    08/06/03 10:21:25	    Page 14
Symbol Table




Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #2  2
  _DATA			16  000A Word	Public	DATA	   #2  #5  9
_TEXT			16  012A Word	Public	CODE	   #2  2  #7  7
